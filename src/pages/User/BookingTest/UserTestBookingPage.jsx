import React, { useState } from "react";
import { useNavigate } from "react-router-dom";
import TestBookingHeader from "./TestBookingHeader";
import TestCartSidebar from "./TestCartSidebar";
import TestDetailModal from "./TestDetailModal";
import { Eye } from 'lucide-react';
import "./UserTestBookingPage.scss";

const testTabs = [
  { label: "G√≥i x√©t nghi·ªám", value: "browse" },
];

const testFilters = {
  type: ["T·∫•t c·∫£ lo·∫°i", "T·ªïng h·ª£p", "T·∫ø b√†o", "M√°u"],
  price: ["T·∫•t c·∫£ gi√°", "< 200k", "200k - 500k", "> 500k"],
  time: ["T·∫•t c·∫£ th·ªùi gian", "< 15 ph√∫t", "15-30 ph√∫t", "> 30 ph√∫t"],
};

const testList = [
  {
    id: 1,
    name: "G√≥i x√©t nghi·ªám STIs c∆° b·∫£n",
    desc: "G√≥i x√©t nghi·ªám c∆° b·∫£n bao g·ªìm: HIV, Giang mai, L·∫≠u, Chlamydia",
    details: [
      { name: "HIV", info: "Ph√°t hi·ªán virus HIV g√¢y suy gi·∫£m mi·ªÖn d·ªãch." },
      { name: "Giang mai", info: "Ph√°t hi·ªán xo·∫Øn khu·∫©n Treponema pallidum." },
      { name: "L·∫≠u", info: "Ph√°t hi·ªán vi khu·∫©n Neisseria gonorrhoeae." },
      { name: "Chlamydia", info: "Ph√°t hi·ªán vi khu·∫©n Chlamydia trachomatis." }
    ],
    time: "30 ph√∫t",
    price: 450,
    result: "K·∫øt qu·∫£ sau 3 ng√†y",
    type: "T·ªïng h·ª£p",
    badge: "Ph·ªï bi·∫øn",
    recommended: true,
  },
  {
    id: 2,
    name: "G√≥i x√©t nghi·ªám STIs to√†n di·ªán",
    desc: "G√≥i x√©t nghi·ªám to√†n di·ªán g·ªìm: HIV, Giang mai, L·∫≠u, Chlamydia, Herpes, HPV",
    details: [
      { name: "HIV", info: "Ph√°t hi·ªán virus HIV g√¢y suy gi·∫£m mi·ªÖn d·ªãch." },
      { name: "Giang mai", info: "Ph√°t hi·ªán xo·∫Øn khu·∫©n Treponema pallidum." },
      { name: "L·∫≠u", info: "Ph√°t hi·ªán vi khu·∫©n Neisseria gonorrhoeae." },
      { name: "Chlamydia", info: "Ph√°t hi·ªán vi khu·∫©n Chlamydia trachomatis." },
      { name: "Herpes", info: "Ph√°t hi·ªán virus Herpes simplex (HSV)." },
      { name: "HPV", info: "Ph√°t hi·ªán virus Human papillomavirus." }
    ],
    time: "45 ph√∫t",
    price: 800,
    result: "K·∫øt qu·∫£ sau 5 ng√†y",
    type: "T·ªïng h·ª£p",
    badge: "Ph·ªï bi·∫øn",
    recommended: false,
  },
  {
    id: 3,
    name: "X√©t nghi·ªám Chlamydia",
    desc: "X√©t nghi·ªám ph√°t hi·ªán vi khu·∫©n Chlamydia trachomatis, nguy√™n nh√¢n ph·ªï bi·∫øn c·ªßa nhi·ªÖm khu·∫©n ƒë∆∞·ªùng sinh d·ª•c.",
    details: [
      { name: "Chlamydia", info: "Ph√°t hi·ªán vi khu·∫©n Chlamydia trachomatis." }
    ],
    time: "10 ph√∫t",
    price: 130,
    result: "K·∫øt qu·∫£ sau 3 ng√†y",
    type: "T·∫ø b√†o",
    badge: null,
    recommended: false,
  },
  {
    id: 4,
    name: "X√©t nghi·ªám Giang mai (Syphilis)",
    desc: "X√©t nghi·ªám m√°u ph√°t hi·ªán vi khu·∫©n Treponema pallidum g√¢y b·ªánh giang mai",
    details: [
      { name: "Giang mai", info: "Ph√°t hi·ªán xo·∫Øn khu·∫©n Treponema pallidum." }
    ],
    time: "10 ph√∫t",
    price: 120,
    result: "K·∫øt qu·∫£ sau 2 ng√†y",
    type: "M√°u",
    badge: null,
    recommended: false,
  },
];

const UserTestBookingPage = () => {
  const navigate = useNavigate();
  const [activeTab, setActiveTab] = useState("browse");
  const [filters, setFilters] = useState({ type: "T·∫•t c·∫£ lo·∫°i", price: "T·∫•t c·∫£ gi√°", time: "T·∫•t c·∫£ th·ªùi gian" });
  const [selectedTests, setSelectedTests] = useState([]);
  const [cartOpen, setCartOpen] = useState(false);
  const [activeStep, setActiveStep] = useState(1);
  const [modalOpen, setModalOpen] = useState(false);
  const [modalTest, setModalTest] = useState(null);

  const handleSelect = (id) => {
    setSelectedTests((prev) => (prev.includes(id) ? prev : [...prev, id]));
  };

  const handleRemove = (id) => {
    setSelectedTests((prev) => prev.filter((tid) => tid !== id));
  };

  const total = testList
    .filter((test) => selectedTests.includes(test.id))
    .reduce((sum, test) => sum + test.price, 0);

  const handleContinue = () => {
    setActiveStep(2);
  };

  return (
    <div className="test-booking-page">
      <TestBookingHeader 
        title="ƒê·∫∑t l·ªãch x√©t nghi·ªám STIs"
        description="Ch·ªçn c√°c x√©t nghi·ªám ph√π h·ª£p v√† ƒë·∫∑t l·ªãch th·ª±c hi·ªán v·ªõi quy tr√¨nh chuy√™n nghi·ªáp"
        activeStep={activeStep}
        selectedTests={selectedTests}
        cartOpen={cartOpen}
        setCartOpen={setCartOpen}
      />

      {activeStep === 1 && <>
        <div className="test-booking-tabs">
          {testTabs.map((tab) => (
            <button
              key={tab.value}
              className={activeTab === tab.value ? "active" : ""}
              onClick={() => setActiveTab(tab.value)}
            >
              {tab.label}
            </button>
          ))}
        </div>
        <div className="test-booking-filter">
          <div className="filter-title">
            <span className="icon">üîé</span> B·ªô l·ªçc t√¨m ki·∫øm
          </div>
          <div className="filter-row">
            <select value={filters.type} onChange={e => setFilters(f => ({ ...f, type: e.target.value }))}>
              {testFilters.type.map(opt => <option key={opt}>{opt}</option>)}
            </select>
            <select value={filters.price} onChange={e => setFilters(f => ({ ...f, price: e.target.value }))}>
              {testFilters.price.map(opt => <option key={opt}>{opt}</option>)}
            </select>
            <select value={filters.time} onChange={e => setFilters(f => ({ ...f, time: e.target.value }))}>
              {testFilters.time.map(opt => <option key={opt}>{opt}</option>)}
            </select>
          </div>
        </div>
        <div className="test-booking-list">
          {testList.map((test) => {
            const isSelected = selectedTests.includes(test.id);
            return (
              <div className={`test-card${isSelected ? " selected" : ""}`} key={test.id}>
                <div className="test-card-header">
                  <span className="test-icon">üß™</span>
                  {test.type && <span className="test-type">X√©t nghi·ªám {test.type}</span>}
                  {test.badge && <span className="test-badge">{test.badge}</span>}
                </div>
                <div className="test-card-title">{test.name}</div>
                <div className="test-card-desc">{test.desc}</div>
                <div className="test-card-meta">
                  <span>‚è± {test.time}</span>
                  <span className="test-price">$ {test.price}k</span>
                </div>
                <div className="test-card-result">{test.result}</div>
                <div className="test-card-actions">
                  <button
                    className={`test-card-add${isSelected ? " selected" : ""}`}
                    disabled={isSelected}
                    onClick={() => handleSelect(test.id)}
                  >
                    {isSelected ? "ƒê√£ ch·ªçn" : "Th√™m v√†o gi·ªè"}
                  </button>
                  <button className="test-card-detail-btn" onClick={() => { setModalTest(test); setModalOpen(true); }} title="Xem chi ti·∫øt">
                    <Eye size={20} />
                  </button>
                </div>
              </div>
            );
          })}
        </div>
      </>}

      <TestDetailModal open={modalOpen} onClose={() => setModalOpen(false)} test={modalTest} />

      {/* Mini cart sidebar */}
      <TestCartSidebar
        selectedTests={selectedTests}
        testList={testList}
        onRemove={handleRemove}
        onContinue={handleContinue}
        open={cartOpen}
        setOpen={setCartOpen}
      />
    </div>
  );
};

export default UserTestBookingPage; 